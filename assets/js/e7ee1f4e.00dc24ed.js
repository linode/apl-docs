"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[4722],{2973:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var s=o(5893),t=o(1151);const r={slug:"core-only",title:"Use APL Core only",sidebar_label:"Use APL only"},i=void 0,l={id:"for-ops/how-to/core-only",title:"Use APL Core only",description:"APL by default installs Gitea, Drone, APL API and APL Console. APL Console is the self-service UI and uses APL API to generate validated configuration code. This configuration code is then committed to Gitea (in the otomi-values repository), which will trigger the pre-configured Tekton pipeline to apply the changes.",source:"@site/docs/for-ops/how-to/core-only.md",sourceDirName:"for-ops/how-to",slug:"/for-ops/how-to/core-only",permalink:"/docs/for-ops/how-to/core-only",draft:!1,unlisted:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/for-ops/how-to/core-only.md",tags:[],version:"current",frontMatter:{slug:"core-only",title:"Use APL Core only",sidebar_label:"Use APL only"},sidebar:"mainSidebar",previous:{title:"Use Team Admin",permalink:"/docs/for-ops/how-to/use-team-admin"},next:{title:"Clone APL",permalink:"/docs/for-ops/how-to/clone-apl"}},a={},c=[{value:"Example",id:"example",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["APL by default installs Gitea, Drone, APL API and APL Console. APL Console is the self-service UI and uses APL API to generate validated configuration code. This configuration code is then committed to Gitea (in the ",(0,s.jsx)(n.code,{children:"otomi-values"})," repository), which will trigger the pre-configured Tekton pipeline to apply the changes."]}),"\n",(0,s.jsx)(n.p,{children:"In some cases you might not want to use APL Console and APL API, but instead install and manage configuration of the platform using a custom pipeline. Possible use-cases for this scenario are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Pushing configuration changes to multiple clusters at the same time (edge use-case)."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Not allowing configuration changes be made by developers."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Only using the open source ",(0,s.jsx)(n.a,{href:"https://github.com/linode/apl-core",children:"APL-core"})," project."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"The example APL Helm chart values below shows how to install APL with A team with 2 workloads and 2 services:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"cluster:\n  name: ${clusterName}\n  provider: ${clusterProvider}\notomi::\n  adminPassword: ${password}\napps:\n  argocd:\n    enabled: true\nteamConfig:\n  demo:\n    password: ${somePassword}\n    id: myapp\n    networkPolicy:\n      egressPublic: true\n      ingressPrivate: true\n    services:\n      - name: front-end\n        ingressClassName: platform\n        networkPolicy:\n            ingressPrivate:\n                mode: DenyAll\n        ownHost: true\n        port: 8080\n        type: public\n        headers:\n          response:\n            set:\n              - name: Cache-Control\n                value: no-store\n              - name: Pragma\n                value: no-cache\n      - name: api\n        networkPolicy:\n            ingressPrivate:\n                mode: AllowOnly\n                allow:\n                  team: myapp\n                  service: front-end\n        port: 8081\n    workloads:\n      - name: front-end\n        path: ksvc\n        revision: v1.0.1\n        selectedChart: ksvc\n        url: https://github.com/redkubes/APL-charts.git\n      - name: api\n        path: deployment\n        revision: v1.0.1\n        selectedChart: deployment\n        url: https://github.com/redkubes/APL-charts.git\nfiles:\n  env/teams/workloads/demo/front-end.yaml: |\n    values: |\n        fullnameOverride: front-end\n        image:\n            repository: harbor.${domainSuffix}/team-demo/front-end\n            tag: latest\n        containerPorts:\n            - name: http1\n            containerPort: 8080\n            protocol: TCP\n        resources:\n            requests:\n                cpu: 200m\n                memory: 32Mi\n        autoscaling:\n            minReplicas: 0\n            maxReplicas: 10    \n  env/teams/workloads/demo/api.yaml: |\n    values: |\n      image:\n        image:\n            repository: harbor.${domainSuffix}/team-demo/api\n            tag: latest\n        containerPorts:\n            - name: http1\n            containerPort: 8080\n            protocol: TCP\n        resources:\n            requests:\n                cpu: 200m\n                memory: 32Mi\n        autoscaling:\n            minReplicas: 1\n            maxReplicas: 10    \n"})}),"\n",(0,s.jsx)(n.p,{children:"You can now make changes in this configuration and apply them directly to the cluster:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Install APL using your custom values:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"helm install -f values.yaml apl apl/apl\n"})}),"\n",(0,s.jsx)(n.p,{children:"After APL has been installed with these values, APL will install and configure:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"All required ingress resources."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Istio (including the virtual services for public exposed services with HTTP response headers)."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Network policies."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Argo CD and Argo CD application sets to automatically deploy the front-end and api workloads."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Change the values"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"You can extend the values with all APL supported configuration."}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Uninstall the APL release:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"helm uninstall APL --no-hooks\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Re-install the chart with the adjusted values:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"helm install -f values.yaml apl apl/apl\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>l,a:()=>i});var s=o(7294);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);