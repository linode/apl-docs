"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[713],{3834:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"get-started/labs/auto-image-update","title":"Configure auto image updater","description":"When using the Workload feature to deploy Helm charts from the Catalog, then you can also use the Auto image updater feature to automatically update the container images of Kubernetes workloads.","source":"@site/docs/get-started/labs/auto-image-update.md","sourceDirName":"get-started/labs","slug":"/get-started/labs/auto-image-update","permalink":"/docs/get-started/labs/auto-image-update","draft":false,"unlisted":false,"editUrl":"https://github.com/linode/linode.github.io/tree/main/docs/get-started/labs/auto-image-update.md","tags":[],"version":"current","frontMatter":{"slug":"auto-image-update","title":"Configure auto image updater","sidebar_label":"Configure Auto Image Updater"},"sidebar":"mainSidebar","previous":{"title":"Expose Services","permalink":"/docs/get-started/labs/expose-services"},"next":{"title":"Create a Database","permalink":"/docs/get-started/labs/create-postgresql-db"}}');var o=n(4848),r=n(8453);const i={slug:"auto-image-update",title:"Configure auto image updater",sidebar_label:"Configure Auto Image Updater"},s=void 0,d={},l=[{value:"Create a Workload with auto image updater",id:"create-a-workload-with-auto-image-updater",level:2},{value:"Expose the service",id:"expose-the-service",level:2},{value:"Make code change to trigger a new build",id:"make-code-change-to-trigger-a-new-build",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["When using the Workload feature to deploy Helm charts from the Catalog, then you can also use the ",(0,o.jsx)(t.code,{children:"Auto image updater"})," feature to automatically update the container images of Kubernetes workloads."]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsx)(t.p,{children:"The image update feature is only supported in combination with a Helm chart stored in the Catalog."})}),"\n",(0,o.jsx)(t.h2,{id:"create-a-workload-with-auto-image-updater",children:"Create a Workload with auto image updater"}),"\n",(0,o.jsxs)(t.p,{children:["Before creating a workload from the developer catalog, we'll need the ",(0,o.jsx)(t.code,{children:"repository"})," and ",(0,o.jsx)(t.code,{children:"tag"})," of the image we like to deploy. Go to the list of Container Images and add the ",(0,o.jsx)(t.code,{children:"repository"})," of the ",(0,o.jsx)(t.code,{children:"green"})," build to your clipboard. Remember that the tag is ",(0,o.jsx)(t.code,{children:"main"}),"."]}),"\n",(0,o.jsx)(t.p,{children:"You can now create a workload from the developer catalog:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Go to ",(0,o.jsx)(t.code,{children:"Workloads"})," in the left menu and click on ",(0,o.jsx)(t.code,{children:"Create Workload"})]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Select ",(0,o.jsx)(t.code,{children:"Quickstart-K8s-Deployment"})," from the catalog."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Add the Name ",(0,o.jsx)(t.code,{children:"green"})," for the workload."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["Set the ",(0,o.jsx)(t.code,{children:"Auto image updater"})," to ",(0,o.jsx)(t.code,{children:"Digest"})," and fill in the ",(0,o.jsx)(t.code,{children:"ImageRepository"})," from the clipboard."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"Digest"})," is the update strategy and will update the image to the most recent pushed version of a given tag."]}),"\n",(0,o.jsxs)(t.ol,{start:"5",children:["\n",(0,o.jsxs)(t.li,{children:["In the workload ",(0,o.jsx)(t.code,{children:"values"}),", change the following parameters:"]}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-yaml",children:"image:\n  repository: <paste from clipboard>\n  tag: main\n"})}),"\n",(0,o.jsxs)(t.ol,{start:"6",children:["\n",(0,o.jsxs)(t.li,{children:["Click ",(0,o.jsx)(t.code,{children:"Submit"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["In the example above, we used the ",(0,o.jsx)(t.code,{children:"Digest"})," update strategy. The ",(0,o.jsx)(t.code,{children:"Semver"})," strategy allows you to track & update images which use tags that follow the semantic versioning scheme."]}),"\n",(0,o.jsx)(t.h2,{id:"expose-the-service",children:"Expose the service"}),"\n",(0,o.jsxs)(t.p,{children:["Now go to the ",(0,o.jsx)(t.a,{href:"/docs/get-started/labs/expose-services",children:"Expose services"})," lab and expose the ",(0,o.jsx)(t.code,{children:"green"})," service. When the service is created, go to ",(0,o.jsx)(t.code,{children:"Services"})," in the left menu and click on the Url of the ",(0,o.jsx)(t.code,{children:"green"})," service. What do you see?"]}),"\n",(0,o.jsx)(t.h2,{id:"make-code-change-to-trigger-a-new-build",children:"Make code change to trigger a new build"}),"\n",(0,o.jsxs)(t.p,{children:["In the Trigger Builds lab we already created a Build called ",(0,o.jsx)(t.code,{children:"green"})," and configured it with a trigger."]}),"\n",(0,o.jsxs)(t.p,{children:["Now go to the ",(0,o.jsx)(t.code,{children:"green"})," repo in Gitea and change the the welcome message:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset="utf-8" />\n    <title>Sample Deployment</title>\n    <style>\n      body {\n        color: #ffffff;\n        background-color: green;\n        font-family: Arial, sans-serif;\n        font-size: 14px;\n      }\n\n      h1 {\n        font-size: 500%;\n        font-weight: normal;\n        margin-bottom: 0;\n      }\n\n      h2 {\n        font-size: 200%;\n        font-weight: normal;\n        margin-bottom: 0;\n      }\n    </style>\n  </head>\n  <body>\n    <div align="center">\n      <h1>Welcome to the improved Green app</h1>\n    </div>\n  </body>\n</html>\n'})}),"\n",(0,o.jsx)(t.p,{children:"And commit changes."}),"\n",(0,o.jsxs)(t.p,{children:["After the change has been committed, go to ",(0,o.jsx)(t.code,{children:"Services"})," in the left menu and click on the Url of the ",(0,o.jsx)(t.code,{children:"green"})," service. After a couple of minutes (note that the auto image update checks for changes every 2 minutes) you should see a ",(0,o.jsx)(t.code,{children:"green"})," page saying ",(0,o.jsx)(t.code,{children:"Welcome to the improved Green app"})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var a=n(6540);const o={},r=a.createContext(o);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);